{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"irgsh-go \u00b6 IRGSH ( https://groups.google.com/d/msg/blankon-dev/yvceclWjSw8/HZUL_m6-BS4J , pronunciation: irgis ) is an all-in-one tool to create and maintain Debian-derived GNU/Linux distribution: from packaging to repository, from ISO build to release management. This codebase is a complete rewrite of the old IRGSH components ( https://github.com/BlankOn?q=irgsh ). This is still under heavy development, therefore you should not rely on this for production since it still subject to breaking API changes. Patches, suggestions and comments are welcome! Complete installation \u00b6 You need Docker, Redis and these packages, gpg pbuilder debootstrap devscripts curl reprepro dh-make Install all deps + released IRGSH with this command bellow, curl -L -o- https://raw.githubusercontent.com/BlankOn/irgsh-go/master/install.sh | bash The command will install the irgsh binaries, default configuration and daemons. A spesial user named irgsh will also be added to your system. Package maintainer installation \u00b6 curl -L -o- https://raw.githubusercontent.com/BlankOn/irgsh-go/master/install-cli.sh | bash The command will install the irgsh-cli binary to your system. Package maintainer update \u00b6 Package maintainer can update their irgsh-cli by running the same command as installation or using sudo irgsh-cli update to let irgsh-cli updates itself. Components \u00b6 A minimal IRGSH ecosystem contains three services and a CLI tool. irgsh-chief acts as the master. The others (also applied to irgsh-cli ) will talk to the chief. The chief also provides a web user interface for workers and pipelines monitoring. irgsh-builder is the builder worker of IRGSH. irgsh-repo will serves as repository so it may need huge volume of storage. irgsh-cli is a client-side tool to maintain packages. Architecture \u00b6 GPG signature is used as authentication bearer on any submission attempt. Hence, you will need to register maintainer's public key to irgsh 's GPG keystore (read Initial setup). Initial setup \u00b6 IRGSH \u00b6 Please refer to /etc/irgsh/config.yml for available preferences. Change it as you need. irgsh-init CLI tool \u00b6 This CLI tool intended to be used on maintainer's local system. It need to be configured first to define the irgsh-chief instance address and your GPG key as package mantainer, irgsh-cli config --chief http://irgsh.blankonlinux.or.id:8080 --key B113D905C417D9C31DAD9F0E509A356412B6E77F Registering a maintainer \u00b6 A maintaner should have a GPG keypair on his machine. His/her public key need to be registered to irgsh 's GPG key store. Export maintainer's GPG public key gpg --armor --export 0D7D9A42E03ACFA2933227F7A13769F4DB99B6CD > /path/to/maintainer-public.key The public.key file need to be transfered into where irgsh-chief live. Then import the maintainer's public key (on behalf of irgsh ), gpg --import < /path/to/maintainer-public.key You can check the list of registered maintainer (on behalf of irgsh ), gpg -k Run \u00b6 The Services \u00b6 You can start them with, sudo systemctl start irgsh-chief sudo systemctl start irgsh-builder sudo systemctl start irgsh-repo Their logs are available at /var/log/irgsh/ . After these three services are up and running, you may continue to work with irgsh-cli CLI \u00b6 Submit a package, irgsh-cli submit \\ --source https://github.com/BlankOn/bromo-theme.git \\ --package https://github.com/BlankOn-packages/bromo-theme.git Check the status of a pipeline, irgsh-cli status 2019-04-01-174135_1ddbb9fe-0517-4cb0-9096-640f17532cf9 Inspect the log of a pipeline, irgsh-cli log 2019-04-01-174135_1ddbb9fe-0517-4cb0-9096-640f17532cf9 Running irgsh-cli status and irgsh-cli log without argument will referenced to the latest submitted pipeline ID. FAQ \u00b6 Why rewrite it? \u00b6 IRGSH was written in Python 2.6.x and it depends on some old and deprecated libraries. Even one of them (in a specific version, respectively) is no longer exists on the internet. A real dependency hell. It\u2019s hard to deploy IRGSH in a modern operating system and it keeps alynne.blankonlinux.or.id from an important system upgrade. The IRGSH was also very modular but combining them into a working distributed cluster takes time and quite steep learning curve. We still need to prepare a lot of things manually before doing that. Pbuilder needs to be configured and setup. Which also true for the reprepro repository. No easy way. Although, there is no doubt that the old IRGSH does its work well. Why Go? \u00b6 For its portable compiled binary. Can I run the workers on different machines? \u00b6 You can. Just make sure these workers pointed out to the same Redis server (see /etc/irgsh/config.yml ). Also please consider this, https://redis.io/topics/security. Why is Docker required? \u00b6 To build a package using pbuilder , sudo or root privilege is required but it's not okay to rely on root privilege for repetitive tasks. To get rid of this, we containerized the build process. Troubleshooting notes \u00b6 No secret key \u00b6 The error message may be like this, gpg: skipped \"41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F\": No secret key gpg: /tmp/debsign.QNCSozgK/blankon-keyring_2016.09.04-4.2.dsc: clear-sign failed: No secret key debsign: gpg error occurred! Aborting.... debuild: fatal error at line 1112: running debsign failed It may caused either by: Your defined key for signing is not available on your GPG keystore. Please redefine it with rgsh-cli config --chief https://irgsh.blankonlinux.or.id --key YOURKEYIDENTITY The latest maintainer information that written in the debian/changelog does not matched with the one on your GPG keystore. Please adjust the changelog file.","title":"Home"},{"location":"#irgsh-go","text":"IRGSH ( https://groups.google.com/d/msg/blankon-dev/yvceclWjSw8/HZUL_m6-BS4J , pronunciation: irgis ) is an all-in-one tool to create and maintain Debian-derived GNU/Linux distribution: from packaging to repository, from ISO build to release management. This codebase is a complete rewrite of the old IRGSH components ( https://github.com/BlankOn?q=irgsh ). This is still under heavy development, therefore you should not rely on this for production since it still subject to breaking API changes. Patches, suggestions and comments are welcome!","title":"irgsh-go"},{"location":"#complete-installation","text":"You need Docker, Redis and these packages, gpg pbuilder debootstrap devscripts curl reprepro dh-make Install all deps + released IRGSH with this command bellow, curl -L -o- https://raw.githubusercontent.com/BlankOn/irgsh-go/master/install.sh | bash The command will install the irgsh binaries, default configuration and daemons. A spesial user named irgsh will also be added to your system.","title":"Complete installation"},{"location":"#package-maintainer-installation","text":"curl -L -o- https://raw.githubusercontent.com/BlankOn/irgsh-go/master/install-cli.sh | bash The command will install the irgsh-cli binary to your system.","title":"Package maintainer installation"},{"location":"#package-maintainer-update","text":"Package maintainer can update their irgsh-cli by running the same command as installation or using sudo irgsh-cli update to let irgsh-cli updates itself.","title":"Package maintainer update"},{"location":"#components","text":"A minimal IRGSH ecosystem contains three services and a CLI tool. irgsh-chief acts as the master. The others (also applied to irgsh-cli ) will talk to the chief. The chief also provides a web user interface for workers and pipelines monitoring. irgsh-builder is the builder worker of IRGSH. irgsh-repo will serves as repository so it may need huge volume of storage. irgsh-cli is a client-side tool to maintain packages.","title":"Components"},{"location":"#architecture","text":"GPG signature is used as authentication bearer on any submission attempt. Hence, you will need to register maintainer's public key to irgsh 's GPG keystore (read Initial setup).","title":"Architecture"},{"location":"#initial-setup","text":"","title":"Initial setup"},{"location":"#irgsh","text":"Please refer to /etc/irgsh/config.yml for available preferences. Change it as you need. irgsh-init","title":"IRGSH"},{"location":"#cli-tool","text":"This CLI tool intended to be used on maintainer's local system. It need to be configured first to define the irgsh-chief instance address and your GPG key as package mantainer, irgsh-cli config --chief http://irgsh.blankonlinux.or.id:8080 --key B113D905C417D9C31DAD9F0E509A356412B6E77F","title":"CLI tool"},{"location":"#registering-a-maintainer","text":"A maintaner should have a GPG keypair on his machine. His/her public key need to be registered to irgsh 's GPG key store. Export maintainer's GPG public key gpg --armor --export 0D7D9A42E03ACFA2933227F7A13769F4DB99B6CD > /path/to/maintainer-public.key The public.key file need to be transfered into where irgsh-chief live. Then import the maintainer's public key (on behalf of irgsh ), gpg --import < /path/to/maintainer-public.key You can check the list of registered maintainer (on behalf of irgsh ), gpg -k","title":"Registering a maintainer"},{"location":"#run","text":"","title":"Run"},{"location":"#the-services","text":"You can start them with, sudo systemctl start irgsh-chief sudo systemctl start irgsh-builder sudo systemctl start irgsh-repo Their logs are available at /var/log/irgsh/ . After these three services are up and running, you may continue to work with irgsh-cli","title":"The Services"},{"location":"#cli","text":"Submit a package, irgsh-cli submit \\ --source https://github.com/BlankOn/bromo-theme.git \\ --package https://github.com/BlankOn-packages/bromo-theme.git Check the status of a pipeline, irgsh-cli status 2019-04-01-174135_1ddbb9fe-0517-4cb0-9096-640f17532cf9 Inspect the log of a pipeline, irgsh-cli log 2019-04-01-174135_1ddbb9fe-0517-4cb0-9096-640f17532cf9 Running irgsh-cli status and irgsh-cli log without argument will referenced to the latest submitted pipeline ID.","title":"CLI"},{"location":"#faq","text":"","title":"FAQ"},{"location":"#why-rewrite-it","text":"IRGSH was written in Python 2.6.x and it depends on some old and deprecated libraries. Even one of them (in a specific version, respectively) is no longer exists on the internet. A real dependency hell. It\u2019s hard to deploy IRGSH in a modern operating system and it keeps alynne.blankonlinux.or.id from an important system upgrade. The IRGSH was also very modular but combining them into a working distributed cluster takes time and quite steep learning curve. We still need to prepare a lot of things manually before doing that. Pbuilder needs to be configured and setup. Which also true for the reprepro repository. No easy way. Although, there is no doubt that the old IRGSH does its work well.","title":"Why rewrite it?"},{"location":"#why-go","text":"For its portable compiled binary.","title":"Why Go?"},{"location":"#can-i-run-the-workers-on-different-machines","text":"You can. Just make sure these workers pointed out to the same Redis server (see /etc/irgsh/config.yml ). Also please consider this, https://redis.io/topics/security.","title":"Can I run the workers on different machines?"},{"location":"#why-is-docker-required","text":"To build a package using pbuilder , sudo or root privilege is required but it's not okay to rely on root privilege for repetitive tasks. To get rid of this, we containerized the build process.","title":"Why is Docker required?"},{"location":"#troubleshooting-notes","text":"","title":"Troubleshooting notes"},{"location":"#no-secret-key","text":"The error message may be like this, gpg: skipped \"41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F\": No secret key gpg: /tmp/debsign.QNCSozgK/blankon-keyring_2016.09.04-4.2.dsc: clear-sign failed: No secret key debsign: gpg error occurred! Aborting.... debuild: fatal error at line 1112: running debsign failed It may caused either by: Your defined key for signing is not available on your GPG keystore. Please redefine it with rgsh-cli config --chief https://irgsh.blankonlinux.or.id --key YOURKEYIDENTITY The latest maintainer information that written in the debian/changelog does not matched with the one on your GPG keystore. Please adjust the changelog file.","title":"No secret key"},{"location":"about/","text":"About \u00b6","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"contributing/","text":"Contributing to irgsh-go \u00b6","title":"Contributing"},{"location":"contributing/#contributing-to-irgsh-go","text":"","title":"Contributing to irgsh-go"},{"location":"hacking/","text":"Guide for developer \u00b6 Requirements \u00b6 Ensure that you have: - Golang - Docker - These packages installed: gpg pbuilder debootstrap devscripts curl reprepro Cloning \u00b6 git clone https://github.com/BlankOn/irgsh-go.git && cd irgsh-go Preparation \u00b6 GPG Key \u00b6 You need to have a pair of GPG key in your GPG store. If you don't have one, please create it with gpg --generate-key . Check it by running gpg --list-key $ gpg --list-key /home/herpiko/.gnupg/pubring.kbx -------------------------------- pub rsa4096 2020-10-17 [SC] [expires: 2021-10-17] 41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F uid [ultimate] Herpiko Dwi Aguno <herpiko@gmail.com> sub rsa4096 2020-10-17 [E] [expires: 2021-10-17] Copy the key identity (in my case, it's the 41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F string) then paste it to replace GPG_SIGN_KEY in utils/config.yml In dev environment, this single key will acts as both repository signing key and package maintainer signing key. On prod, they will be different keys. Initialization \u00b6 Client \u00b6 You need to build then initialize the CLI client to point out to the chief and your signing key (see GPG Key section). make client ./bin/irgsh-cli config --chief http://localhost:8080 --key 41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F Builder \u00b6 make builder-init This command will: - Create pbuilder base.tgz that follow our configuration. This step need root privilege, you'll be asked for root password. - Create docker image that will be used to build packages. Repository \u00b6 make repo-init This command will remove existing repositories if any and reinit the new one. You may be asked for your GPG key passphrase. You can tweak repository configuration in repo section of utils/config.yml Redis \u00b6 make redis Starting up \u00b6 Open three different terminal and run these command for each: - make chief occupying port 8080 - make builder , occupying port 8081 - make repo , occupying port 8082 Testing \u00b6 Open the fourth terminal and try to submit dummy package using this command bellow: ./bin/irgsh-cli submit --experimental --source https://github.com/BlankOn/bromo-theme.git --package https://github.com/BlankOn-packages/bromo-theme.git You may be asked for your GPG key passphrase. You'll see the package preprared in this terminal, then in the chief terminal (job coordination), then in builder terminal (package building), then in repo terminal (package submission into the repository). If all is well, you can see the result by opening http://localhost:8082/experimental/ on your web browser. At this point, you may start to hack. Check the status of a pipeline curl http://localhost:8080/api/v1/status?uuid=uuidstring Test & Coverage \u00b6 make test It will test the code and open the coverage result on your browser.","title":"Developer Guide"},{"location":"hacking/#guide-for-developer","text":"","title":"Guide for developer"},{"location":"hacking/#requirements","text":"Ensure that you have: - Golang - Docker - These packages installed: gpg pbuilder debootstrap devscripts curl reprepro","title":"Requirements"},{"location":"hacking/#cloning","text":"git clone https://github.com/BlankOn/irgsh-go.git && cd irgsh-go","title":"Cloning"},{"location":"hacking/#preparation","text":"","title":"Preparation"},{"location":"hacking/#gpg-key","text":"You need to have a pair of GPG key in your GPG store. If you don't have one, please create it with gpg --generate-key . Check it by running gpg --list-key $ gpg --list-key /home/herpiko/.gnupg/pubring.kbx -------------------------------- pub rsa4096 2020-10-17 [SC] [expires: 2021-10-17] 41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F uid [ultimate] Herpiko Dwi Aguno <herpiko@gmail.com> sub rsa4096 2020-10-17 [E] [expires: 2021-10-17] Copy the key identity (in my case, it's the 41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F string) then paste it to replace GPG_SIGN_KEY in utils/config.yml In dev environment, this single key will acts as both repository signing key and package maintainer signing key. On prod, they will be different keys.","title":"GPG Key"},{"location":"hacking/#initialization","text":"","title":"Initialization"},{"location":"hacking/#client","text":"You need to build then initialize the CLI client to point out to the chief and your signing key (see GPG Key section). make client ./bin/irgsh-cli config --chief http://localhost:8080 --key 41B4FC0A57E7F7F8DD94E0AA2D21BB5FAA32AF3F","title":"Client"},{"location":"hacking/#builder","text":"make builder-init This command will: - Create pbuilder base.tgz that follow our configuration. This step need root privilege, you'll be asked for root password. - Create docker image that will be used to build packages.","title":"Builder"},{"location":"hacking/#repository","text":"make repo-init This command will remove existing repositories if any and reinit the new one. You may be asked for your GPG key passphrase. You can tweak repository configuration in repo section of utils/config.yml","title":"Repository"},{"location":"hacking/#redis","text":"make redis","title":"Redis"},{"location":"hacking/#starting-up","text":"Open three different terminal and run these command for each: - make chief occupying port 8080 - make builder , occupying port 8081 - make repo , occupying port 8082","title":"Starting up"},{"location":"hacking/#testing","text":"Open the fourth terminal and try to submit dummy package using this command bellow: ./bin/irgsh-cli submit --experimental --source https://github.com/BlankOn/bromo-theme.git --package https://github.com/BlankOn-packages/bromo-theme.git You may be asked for your GPG key passphrase. You'll see the package preprared in this terminal, then in the chief terminal (job coordination), then in builder terminal (package building), then in repo terminal (package submission into the repository). If all is well, you can see the result by opening http://localhost:8082/experimental/ on your web browser. At this point, you may start to hack. Check the status of a pipeline curl http://localhost:8080/api/v1/status?uuid=uuidstring","title":"Testing"},{"location":"hacking/#test-coverage","text":"make test It will test the code and open the coverage result on your browser.","title":"Test &amp; Coverage"},{"location":"license/","text":"License \u00b6 irgsh-go License (BSD) \u00b6 Copyright (c) 2018-2019, BlankOn Project blankon-dev@googlegroups.com All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of Redis nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"license/#license","text":"","title":"License"},{"location":"license/#irgsh-go-license-bsd","text":"Copyright (c) 2018-2019, BlankOn Project blankon-dev@googlegroups.com All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of Redis nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"irgsh-go License (BSD)"},{"location":"reference/","text":"Reference \u00b6 irgsh-chief \u00b6 Acts as the master. The others (also applied to irgsh-cli) will talk to the chief. The chief also provides a web user interface for workers and pipelines monitoring. irgsh-builder \u00b6 The builder worker of IRGSH. COMMANDS \u00b6 init-builder, i Initialize builder init-base, i Initialize pbuilder base.tgz. This need to be run under sudo or root update-base, i update base.tgz help, h Shows a list of commands or help for one command GLOBAL OPTIONS \u00b6 --help, -h show help --version, -v print the version irgsh-repo \u00b6 Serves as repository so it may need huge volume of storage. COMMANDS \u00b6 init, i initialize repository sync, i update base.tgz help, h Shows a list of commands or help for one command GLOBAL OPTIONS \u00b6 --help, -h show help --version, -v print the version irgsh-cli \u00b6 Client-side tool to maintain packages. COMMANDS \u00b6 config Configure irgsh-cli submit Submit new build status Check status of a pipeline log Read the logs of a pipeline update Update the irgsh-cli tool help, h Shows a list of commands or help for one command GLOBAL OPTIONS \u00b6 --help, -h show help --version, -v print the version","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#irgsh-chief","text":"Acts as the master. The others (also applied to irgsh-cli) will talk to the chief. The chief also provides a web user interface for workers and pipelines monitoring.","title":"irgsh-chief"},{"location":"reference/#irgsh-builder","text":"The builder worker of IRGSH.","title":"irgsh-builder"},{"location":"reference/#commands","text":"init-builder, i Initialize builder init-base, i Initialize pbuilder base.tgz. This need to be run under sudo or root update-base, i update base.tgz help, h Shows a list of commands or help for one command","title":"COMMANDS"},{"location":"reference/#global-options","text":"--help, -h show help --version, -v print the version","title":"GLOBAL OPTIONS"},{"location":"reference/#irgsh-repo","text":"Serves as repository so it may need huge volume of storage.","title":"irgsh-repo"},{"location":"reference/#commands_1","text":"init, i initialize repository sync, i update base.tgz help, h Shows a list of commands or help for one command","title":"COMMANDS"},{"location":"reference/#global-options_1","text":"--help, -h show help --version, -v print the version","title":"GLOBAL OPTIONS"},{"location":"reference/#irgsh-cli","text":"Client-side tool to maintain packages.","title":"irgsh-cli"},{"location":"reference/#commands_2","text":"config Configure irgsh-cli submit Submit new build status Check status of a pipeline log Read the logs of a pipeline update Update the irgsh-cli tool help, h Shows a list of commands or help for one command","title":"COMMANDS"},{"location":"reference/#global-options_2","text":"--help, -h show help --version, -v print the version","title":"GLOBAL OPTIONS"}]}